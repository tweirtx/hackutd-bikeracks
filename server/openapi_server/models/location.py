# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, latitude=None, longitude=None, description=None, photo=None):  # noqa: E501
        """Location - a model defined in OpenAPI

        :param id: The id of this Location.  # noqa: E501
        :type id: int
        :param latitude: The latitude of this Location.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Location.  # noqa: E501
        :type longitude: float
        :param description: The description of this Location.  # noqa: E501
        :type description: str
        :param photo: The photo of this Location.  # noqa: E501
        :type photo: str
        """
        self.openapi_types = {
            'id': int,
            'latitude': float,
            'longitude': float,
            'description': str,
            'photo': str
        }

        self.attribute_map = {
            'id': 'id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'description': 'description',
            'photo': 'photo'
        }

        self._id = id
        self._latitude = latitude
        self._longitude = longitude
        self._description = description
        self._photo = photo

    @classmethod
    def from_dict(cls, dikt) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Location of this Location.  # noqa: E501
        :rtype: Location
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Location.


        :return: The id of this Location.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.


        :param id: The id of this Location.
        :type id: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this Location.


        :return: The latitude of this Location.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location.


        :param latitude: The latitude of this Location.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Location.


        :return: The longitude of this Location.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location.


        :param longitude: The longitude of this Location.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def description(self):
        """Gets the description of this Location.


        :return: The description of this Location.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Location.


        :param description: The description of this Location.
        :type description: str
        """

        self._description = description

    @property
    def photo(self):
        """Gets the photo of this Location.


        :return: The photo of this Location.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this Location.


        :param photo: The photo of this Location.
        :type photo: str
        """

        self._photo = photo
